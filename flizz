#!/usr/bin/env ruby

here = File.dirname(__FILE__)
require "#{here}/hipe-tinyscript/core.rb"
# require "#{here}/hipe-tinyscript/support.rb"
require 'fileutils'

module Flizz; end
Flizz::Config = {
  :simmies => [
    {:src => './the-gibson/nginx-conf', :tgt => '/etc/nginx/conf' },
    {:src => './the-gibson/motion-conf', :tgt => '/etc/motion'    },
    {:src => './hipeland/monit-conf/monitrc', :tgt => '/etc/monitrc' }
  ],
  :hosts => [
    {:name => 'hipeland' },
    {:name => 'the-gibson' }
  ]
}

module Flizz
  class MyCommand < Hipe::Tinyscript::Command
    def dry_run?; @param[:dry_run] end
  end
  module Commands
    class Symlinks < MyCommand
      description "symlinks -- check'em, make'em"
      parameter '-n', '--dry-run', "don't do eet"
      parameter :host, Hash[*Config[:hosts].map{|x| [x[:name], x[:name]]}.flatten], '',
        :positional => 1, :required => 1
      def execute
        re = Regexp.new('^'+Regexp.escape("./#{param(:host)}"))
        simmies = Config[:simmies].select{|x| x[:src] =~ re }
        simmies.each{ |simmy| do_simmy(simmy) }
        nil
      end
    private
      def do_simmy simmy
        src, tgt = [simmy[:src], simmy[:tgt]]
        full_src = File.expand_path(src, File.dirname(__FILE__))
        if File.exist?(tgt) || File.symlink?(tgt) # catches bad symlinks
          if File.symlink?(tgt)
            actual_src = File.readlink(tgt) # http://ruby-doc.org/core/classes/File.src/M002534.html
            if actual_src == full_src
              out colorize('ok: ', :green) << "#{tgt} -> #{full_src}"
            else
              out colorize('notice: ', :yellow) << "#{tgt} -> #{actual_src} (! #{full_src})"
              if ! File.exist?(tgt)
                out colorize('notice: ', :yellow) <<
                  "#{colorize(tgt, :magenta)} -> #{actual_src} (target path does not exist)"
              end
            end
          else
            out colorize('notice: ', :yellow) << "not a symlink: #{tgt}"
          end
        else
          FileUtils.ln_s(full_src, tgt, :verbose => 1, :noop => dry_run?)
        end
      end
    end
  end
end

module Flizz
  class App < Hipe::Tinyscript::App
    commands Commands
    config Config
  end
end

Flizz::App.new.run(ARGV)
